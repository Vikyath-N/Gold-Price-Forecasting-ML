name: 🌐 Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 📦 Create Sample Data (if missing)
        run: |
          echo "🔍 Checking for required data files..."
          
          # Create data directory if it doesn't exist
          mkdir -p docs/data
          
          # Create sample data files if they don't exist
          if [ ! -f "docs/data/web_data.json" ]; then
            echo "📊 Creating sample web data..."
            cp docs/data/sample_data.json docs/data/web_data.json
            echo "✅ Sample web data created successfully!"
          fi
          
          if [ ! -f "docs/data/latest_forecast.json" ]; then
            echo "🔮 Creating sample forecast data..."
            cp docs/data/sample_data.json docs/data/latest_forecast.json
            echo "✅ Sample forecast data created successfully!"
          fi
          
          echo "✅ Data preparation completed!"

      - name: 🔧 Optimize Assets
        run: |
          echo "⚡ Optimizing web assets..."
          
          # Create robots.txt
          cat > docs/robots.txt << EOF
User-agent: *
Allow: /

Sitemap: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/sitemap.xml
EOF

          # Create sitemap.xml
          cat > docs/sitemap.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/</loc>
    <lastmod>$(date +%Y-%m-%d)</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>
EOF

          # Create manifest.json for PWA
          cat > docs/manifest.json << EOF
{
  "name": "Gold Price Forecasting AI",
  "short_name": "Gold AI",
  "description": "Real-time ML-powered gold price predictions",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0F1419",
  "theme_color": "#FFD700",
  "icons": [
    {
      "src": "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><circle cx='50' cy='50' r='40' fill='%23FFD700'/><text x='50' y='60' text-anchor='middle' font-size='30' fill='%23000'>🥇</text></svg>",
      "sizes": "192x192",
      "type": "image/svg+xml"
    }
  ]
}
EOF

          echo "✅ Asset optimization completed!"

      - name: 📊 Validate Data Files
        run: |
          echo "🔍 Validating data files..."
          
          # Check if required files exist
          required_files=("docs/index.html" "docs/assets/css/style.css" "docs/assets/js/app.js" "docs/data/web_data.json")
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done
          
          # Validate JSON files
          echo "🔍 Validating JSON data..."
          for file in docs/data/web_data.json docs/data/latest_forecast.json docs/data/sample_data.json; do
            if [ -f "$file" ]; then
              if python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo "✅ $file is valid JSON"
              else
                echo "❌ $file has invalid JSON"
                exit 1
              fi
            else
              echo "⚠️  $file not found"
            fi
          done
          
          echo "✅ Data validation completed!"

      - name: 🏗️ Setup Pages
        uses: actions/configure-pages@v4
        
      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment Summary
        run: |
          echo "## 🌐 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Live URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Status**: Active" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Interactive gold price dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Real-time ML predictions" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-model comparison" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Historical price charts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Mobile-responsive design" >> $GITHUB_STEP_SUMMARY
