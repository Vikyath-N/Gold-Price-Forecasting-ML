name: 🥇 Daily Gold Price Forecast

on:
  schedule:
    # Run at 6:00 AM EST (11:00 UTC) every day
    - cron: '0 11 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths: 
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  forecast:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📊 Fetch Latest Market Data
      env:
        ALPHA_VANTAGE_KEY: ${{ secrets.ALPHA_VANTAGE_KEY }}
      run: |
        echo "🔍 Fetching latest gold price data..."
        mkdir -p docs/data
        python scripts/data_fetcher.py
        
        echo "📈 Market data fetch completed!"
        if [ -f "docs/data/market_data.json" ]; then
          echo "✅ Market data file created successfully"
          ls -la docs/data/
        else
          echo "❌ Market data file not found"
          exit 1
        fi

    - name: 🤖 Generate ML Predictions
      run: |
        echo "🧠 Running ML prediction models..."
        python scripts/model_predictor.py
        
        echo "🔮 Predictions generated!"
        if [ -f "docs/data/latest_forecast.json" ]; then
          echo "✅ Forecast file created successfully"
          python - << 'PY'
import json
try:
    with open('docs/data/latest_forecast.json', 'r') as f:
        data = json.load(f)
    current = data.get('current_price', 0) or 0
    ensemble = (data.get('predictions', {}).get('models', {}).get('ensemble') or [0])
    print(f"📊 Current Price: ${current:.2f}")
    if ensemble:
        print(f"🔮 Tomorrow Prediction: ${float(ensemble[0]):.2f}")
    trend = data.get('insights', {}).get('trend', {}).get('direction', 'Unknown')
    print(f"📈 Trend: {trend}")
except Exception as e:
    print(f"⚠️ Summary failed: {e}")
PY
        else
          echo "❌ Forecast file not found"
          exit 1
        fi

    - name: 📱 Update Web App Data
      run: |
        echo "🌐 Preparing data for web application..."
        
        # Create or update the web app data file
        cat > update_web_data.py << 'EOF'
import json
from datetime import datetime

# Load forecast data
try:
    with open('docs/data/latest_forecast.json', 'r') as f:
        forecast = json.load(f)
    
    with open('docs/data/market_data.json', 'r') as f:
        market = json.load(f)
    
    # Create web-friendly data structure
    web_data = {
        'timestamp': datetime.now().isoformat(),
        'current_price': forecast.get('current_price', 0),
        'predictions': forecast.get('predictions', {}),
        'confidence': forecast.get('confidence', {}),
        'insights': forecast.get('insights', {}),
        'model_performance': forecast.get('model_performance', {}),
        'historical_data': market.get('gold_price', {}).get('data', [])[-30:],
        'last_updated': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
        'data_source': market.get('gold_price', {}).get('source', 'Unknown'),
        'next_update': 'Daily at 6:00 AM EST'
    }
    
    # Save web data
    with open('docs/data/web_data.json', 'w') as f:
        json.dump(web_data, f, indent=2, default=str)
    
    print('✅ Web application data updated successfully!')
    
except Exception as e:
    print(f'❌ Error updating web data: {e}')
    exit(1)
EOF
        python update_web_data.py

    - name: 📈 Generate Performance Report
      run: |
        echo "📊 Generating performance report..."
        
        cat > generate_report.py << 'EOF'
import json
import os
from datetime import datetime, timedelta

try:
    # Load current forecast
    with open('docs/data/latest_forecast.json', 'r') as f:
        current_forecast = json.load(f)
    
    # Create performance log entry
    log_entry = {
        'date': datetime.now().strftime('%Y-%m-%d'),
        'timestamp': datetime.now().isoformat(),
        'current_price': current_forecast.get('current_price', 0),
        'predictions': {
            model: preds[0] if preds else 0 
            for model, preds in current_forecast.get('predictions', {}).get('models', {}).items()
        },
        'confidence': {
            model: conf.get('avg_confidence', 0)
            for model, conf in current_forecast.get('confidence', {}).items()
        }
    }
    
    # Load existing performance log
    log_file = 'docs/data/performance_log.json'
    if os.path.exists(log_file):
        with open(log_file, 'r') as f:
            performance_log = json.load(f)
    else:
        performance_log = {'entries': []}
    
    # Add new entry
    performance_log['entries'].append(log_entry)
    
    # Keep only last 30 days
    cutoff_date = datetime.now() - timedelta(days=30)
    performance_log['entries'] = [
        entry for entry in performance_log['entries']
        if datetime.fromisoformat(entry['timestamp'].replace('Z', '+00:00')) > cutoff_date
    ]
    
    # Save updated log
    with open(log_file, 'w') as f:
        json.dump(performance_log, f, indent=2, default=str)
    
    print(f'✅ Performance log updated with {len(performance_log["entries"])} entries')
    
except Exception as e:
    print(f'❌ Error generating performance report: {e}')
EOF
        python generate_report.py

    - name: 🎯 Commit and Push Results
      run: |
        echo "💾 Committing forecast results..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Gold Forecast Bot"
        
        # Add all data files
        git add docs/data/
        
        # Create summary for commit message
        python - << 'PY' > commit_msg.txt
import json
from datetime import datetime
try:
    with open('docs/data/latest_forecast.json', 'r') as f:
        data = json.load(f)
    current = data.get('current_price', 0) or 0
    ensemble = (data.get('predictions', {}).get('models', {}).get('ensemble') or [0])
    trend = data.get('insights', {}).get('trend', {}).get('direction', 'Unknown')
    print("🤖 Daily forecast update " + datetime.utcnow().strftime('%Y-%m-%d'))
    print()
    print(f"📊 Current: ${current:.2f}")
    if ensemble:
        print(f"🔮 Tomorrow: ${float(ensemble[0]):.2f}")
    print(f"📈 Trend: {trend}")
    print()
    print("Generated by automated ML pipeline")
except Exception:
    print("🤖 Daily forecast update")
PY
        
        if git diff --staged --quiet; then
          echo "📝 No changes to commit"
        else
          git commit -F commit_msg.txt
          echo "🚀 Pushing changes to repository..."
          git push
          echo "✅ Forecast results committed and pushed successfully!"
        fi

    - name: 🌐 Trigger GitHub Pages Deploy
      run: |
        echo "✅ Data updated successfully!"
        echo "GitHub Pages will automatically deploy from the docs/ folder"
        echo "🌐 Live site: https://vikyath-n.github.io/Gold-Price-Forecasting-ML/"

    - name: 📊 Workflow Summary
      run: |
        echo "## 🥇 Gold Price Forecast Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "docs/data/latest_forecast.json" ]; then
          cat > summary.py << 'EOF'
import json
import sys

try:
    with open('docs/data/latest_forecast.json', 'r') as f:
        data = json.load(f)
    
    current = data.get('current_price', 0)
    predictions = data.get('predictions', {}).get('models', {})
    insights = data.get('insights', {})
    
    print(f'### 📊 Market Data')
    print(f'- **Current Price**: ${current:.2f}')
    print(f'- **Data Source**: {data.get("metadata", {}).get("data_points", 0)} historical points')
    print('')
    
    print(f'### 🔮 Tomorrow Predictions')
    for model, preds in predictions.items():
        if preds:
            print(f'- **{model.upper()}**: ${preds[0]:.2f}')
    print('')
    
    print(f'### 📈 Market Insights')
    trend = insights.get('trend', {})
    print(f'- **Trend**: {trend.get("direction", "Unknown")} ({trend.get("change_percent", 0):.2f}%)')
    print(f'- **Volatility**: {insights.get("volatility", {}).get("level", "Unknown")}')
    print(f'- **Support**: ${insights.get("key_levels", {}).get("support", 0):.2f}')
    print(f'- **Resistance**: ${insights.get("key_levels", {}).get("resistance", 0):.2f}')
    print('')
    
    print(f'### 🎯 Model Performance')
    performance = data.get('model_performance', {})
    for model, accuracy in performance.items():
        print(f'- **{model.upper()}**: {accuracy:.1f}% accuracy')
    
except Exception as e:
    print(f'❌ Error generating summary: {e}')
    sys.exit(1)
EOF
          python summary.py >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Forecast data not available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🕐 **Generated**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Dashboard**: [View Live Dashboard](https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/)" >> $GITHUB_STEP_SUMMARY

  # Notify on failure (optional)
  notify-failure:
    needs: forecast
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: 📧 Notify Failure
      run: |
        echo "❌ Daily forecast pipeline failed!"
        echo "Please check the workflow logs for details."
        # Add notification logic here (email, Slack, etc.) if needed
