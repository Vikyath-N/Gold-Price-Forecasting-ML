---
name: 🥇 Daily Gold Price Forecast

on:
  schedule:
    # Run at 6:00 AM EST (11:00 UTC) every day
    - cron: '0 11 * * *'
  workflow_dispatch: {}
  push:
    branches: [main]
    paths:
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  forecast:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: 📊 Fetch Latest Market Data
        env:
          ALPHA_VANTAGE_KEY: ${{ secrets.ALPHA_VANTAGE_KEY }}
        run: |
          echo "🔍 Fetching latest gold price data..."
          mkdir -p docs/data
          python scripts/data_fetcher.py
          echo "📈 Market data fetch completed!"
          if [ ! -f "docs/data/market_data.json" ]; then
            echo "❌ Market data file not found"
            exit 1
          fi
          echo "✅ Market data file created successfully"
          ls -la docs/data/

      - name: 🤖 Generate ML Predictions
        run: |
          echo "🧠 Running ML prediction models..."
          python scripts/model_predictor.py
          echo "🔮 Predictions generated!"
          if [ ! -f "docs/data/latest_forecast.json" ]; then
            echo "❌ Forecast file not found"
            exit 1
          fi
          echo "✅ Forecast file created successfully"
          python scripts/ci/print_forecast_brief.py

      - name: 📱 Update Web App Data
        run: |
          echo "🌐 Preparing data for web application..."
          python scripts/ci/update_web_data.py

      - name: 📈 Generate Performance Report
        run: |
          echo "📊 Generating performance report..."
          python scripts/ci/generate_performance_report.py

      - name: 🎯 Commit and Push Results
        run: |
          echo "💾 Committing forecast results..."
          git config --local user.email "action@github.com"
          git config --local user.name "Gold Forecast Bot"
          git add docs/data/
          python scripts/ci/generate_commit_msg.py > commit_msg.txt
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            git commit -F commit_msg.txt
            echo "🚀 Pushing changes to repository..."
            git push
            echo "✅ Forecast results committed and pushed successfully!"
          fi

      - name: 🌐 Trigger GitHub Pages Deploy
        run: |
          echo "✅ Data updated successfully!"
          echo "GitHub Pages will automatically deploy from the docs/ folder"
          OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          REPO=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          echo "🌐 Live site: https://${OWNER}.github.io/${REPO}/"

      - name: 📊 Workflow Summary
        run: |
          echo "## 🥇 Gold Price Forecast Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ ! -f "docs/data/latest_forecast.json" ]; then
            echo "❌ Forecast data not available" >> $GITHUB_STEP_SUMMARY
          else
            python scripts/ci/generate_summary.py >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🕐 **Generated**: $(date)" >> $GITHUB_STEP_SUMMARY
          OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          REPO=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          URL="https://${OWNER}.github.io/${REPO}/"
          echo "🌐 **Dashboard**: [View Live Dashboard](${URL})" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    needs: forecast
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: 📧 Notify Failure
        run: |
          echo "❌ Daily forecast pipeline failed!"
          echo "Please check the workflow logs for details."
